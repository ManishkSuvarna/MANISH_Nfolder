import cv2
import numpy as np
import matplotlib.pyplot as plt
original_image=cv2.imread
equalized_image=cv2.equalizeHist(original_image)
def calculate_rms_contrast(image):
    mean_intensity=np.mean(image)
    contrast=np.sqrt(np.mean((image-mean_intensity)**2))
    return contrast
original_contrast=calculate_rms_contrast(original_image)
equalized_contrast=calculate_rms_contrast(equalized_image)
plt.figure(figure=(15,10))
plt.subplot(2,2,1)
plt.imshow(original_image,cmap='gray')
plt.title('Original Image')
plt.axis('off')
plt.subplot(2,2,2)
plt.hist(original_image.ravel(),256,[0,256])
plt.title('Histogram of Original Image')
plt.subplot(2,2,3)
plt.imshow(equalized_image,cmap='gray')
plt.title('Equalized Image')
plt.axis('off')
plt.subplot(2,2,4)
plt.hist(equalized_image.ravel(),256,[0,256])
plt.title('Histogram of Equalized Image')
plt.show()
print(f"RMS Contrast of Original Image:{original_contrast}")
print(f"RMS Contrast of Equalized Image:{equalized_contrast}")       




import cv2
import numpy as np
import matplotlib.pyplot as plt
image=cv2.imread
def display_image(title,image):
    plt.imshow(cv2.cvtColor(img,cv2.COLOR_BGR2RGB))
    plt.title(title)
    plt.axis('off')
    plt.show()
(h,w)=image.shape[:2]
center=(w//2,h//2)
rotation_angle=45
scale_factor=1.5
rotation_matrix=cv2.getRotationMatrix2D(center,rotation_angle,scale_factor)
rotation_sacle_image=cv2.warpAffine(image,rotation_matrix,(w,h))
plt.figure(figsize=(10,5))
plt.supplot(1,2,1)
display_image("Original Image",image)
plt.subplot(1,2,2)
display_image("Rotated and Scaled Image",rotated_scaled_image)


import cv2
import matplotlib.pyplot as plt
image=cv2.imread
gray_image=cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
blurred_image=cv2.GaussianBlur(gray_image,(5,5),0)
edges=cv2.Canny(blurred_image,threshold1=150,threshold2=250)
plt 