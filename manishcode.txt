import cv2
import numpy as np
import matplotlib.pyplot as plt
original_image=cv2.imread
equalized_image=cv2.equalizeHist(original_image)
def calculate_rms_contrast(image):
    mean_intensity=np.mean(image)
    contrast=np.sqrt(np.mean((image-mean_intensity)**2))
    return contrast
original_contrast=calculate_rms_contrast(original_image)
equalized_contrast=calculate_rms_contrast(equalized_image)
plt.figure(figure=(15,10))
plt.subplot(2,2,1)
plt.imshow(original_image,cmap='gray')
plt.title('Original Image')
plt.axis('off')
plt.subplot(2,2,2)
plt.hist(original_image.ravel(),256,[0,256])
plt.title('Histogram of Original Image')
plt.subplot(2,2,3)
plt.imshow(equalized_image,cmap='gray')
plt.title('Equalized Image')
plt.axis('off')
plt.subplot(2,2,4)
plt.hist(equalized_image.ravel(),256,[0,256])
plt.title('Histogram of Equalized Image')
plt.show()
print(f"RMS Contrast of Original Image:{original_contrast}")
print(f"RMS Contrast of Equalized Image:{equalized_contrast}")       




import cv2
import numpy as np
import matplotlib.pyplot as plt
image=cv2.imread
def display_image(title,image):
    plt.imshow(cv2.cvtColor(img,cv2.COLOR_BGR2RGB))
    plt.title(title)
    plt.axis('off')
    plt.show()
(h,w)=image.shape[:2]
center=(w//2,h//2)
rotation_angle=45
scale_factor=1.5
rotation_matrix=cv2.getRotationMatrix2D(center,rotation_angle,scale_factor)
rotation_sacle_image=cv2.warpAffine(image,rotation_matrix,(w,h))
plt.figure(figsize=(10,5))
plt.supplot(1,2,1)
display_image("Original Image",image)
plt.subplot(1,2,2)
display_image("Rotated and Scaled Image",rotated_scaled_image)


import cv2
import matplotlib.pyplot as plt
image=cv2.imread
gray_image=cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
blurred_image=cv2.GaussianBlur(gray_image,(5,5),0)
edges=cv2.Canny(blurred_image,threshold1=150,threshold2=250)
plt 

hello world***

@##**& new changes

import cv2 as cv
import numpy as np
from matplotlib import pyplot as plt
img=cv.imread('C:/Users/Lenovo/Downloads/IMAGE1.JPG',cv.IMREAD_GRAYSCALE)
img2=img.copy()
template=cv.imread('C:/Users/Lenovo/Downloads/IMAGE21.JPG',cv.IMREAD_GRAYSCALE)
w,h=template.shape[::-1]
methods=['TM_CCOEFF','TM_CCOEFF_NORMED','TM_CCORR','TM_CCORR_NORMED','TM_SQDIFF','TM_SQDIFF_NORMED']

for math in methods:
    img=img2.copy()
    method=getattr(cv,math)
    res=cv.matchTemplate(img,template,method)
    min_val,max_val,min_loc,max_loc=cv.minMaxLoc(res)
    if method in [cv.TM_SQDIFF,cv.TM_SQDIFF_NORMED]:
        top_left=min_loc
    else:
        top_left=max_loc
    bottom_right=(top_left[0]+w,top_left[1]+h)
    cv.rectangle(img,top_left,bottom_right,255,2)
    plt.subplot(121),plt.imshow(res,cmap='gray')
    plt.title('Maching Result'),plt.xticks([]),plt.yticks([])
    plt.subplot(122),plt.imshow(img,cmap='gray')
    plt.title('Detected Point'),plt.xticks([]),plt.yticks([])
    plt.suptitle(math)
    plt.show()
